//
//  TrackerRequestModel.swift
//  SwiftTorrent
//
//  Created by Daniel Tombor on 2017. 09. 16..
//  Copyright Â© 2017. danieltmbr. All rights reserved.
//

import Foundation
import CryptoSwift

enum TorrentEvent: String {
    case started, stopped, completed
}

struct TrackerRequestModel {
    
    // MARK: - Keys
    
    private struct Keys {
        let infoHash = "info_hash"
        let peerId = "peer_id"
        let port = "port"
        let uploaded = "uploaded"
        let downloaded = "downloaded"
        let left = "left"
        let compact = "compact"
        let noPeerId = "no_peer_id"
        let event = "event"
        let ip = "ip"
        let numwant = "numwant"
        let key = "key"
        let trackerId = "trackerid"
    }
    
    // MARK: - Properties
    
    /** Urlencoded 20-byte SHA1 hash of the value of the
     info key from the Metainfo file. Note that the
     value will be a bencoded dictionary. */
    let infoHash: Data
    
    /** urlencoded 20-byte string used as a unique ID for
     the client, generated by the client at startup.
     This is allowed to be any value, and may be binary data. */
    let peerId: String
    
    /** The port number that the client is listening on.
     Ports reserved for BitTorrent are typically 6881-6889.
     Clients may choose to give up if it cannot establish
     a port within this range. */
    let port: Int
    
    /** The total amount (byte) uploaded (since the client
     sent the 'started' event to the tracker) in base ten ASCII */
    let uploaded: Int
    
    /** The total amount (byte) downloaded (since the client
     sent the 'started' event to the tracker) in base ten ASCII. */
    let downloaded: Int
    
    /** The number of bytes this client still has to download
     in base ten ASCII. Clarification: The number of bytes needed
     to download to be 100% complete and get all the included
     files in the torrent. */
    let left: Int
    
    /** Setting this to 1 indicates that the client accepts
     a compact response. The peers list is replaced by a
     peers string with 6 bytes per peer. */
    let compact: Bool
    
    /** Indicates that the tracker can omit peer id field in peers
     dictionary. This option is ignored if compact is enabled. */
    let noPeerId: Bool
    
    /** If specified, must be one of started, completed, stopped,
     (or empty which is the same as not being specified). */
    let event: TorrentEvent?
    
    /** The true IP address of the client machine, in dotted
     quad format or rfc3513 defined hexed IPv6 address. */
    let ip: String?
    
    /**  Number of peers that the client would like to receive
     from the tracker. This value is permitted to be zero.
     If omitted, typically defaults to 50 peers. */
    let numwant: Int?
    
    /**  An additional identification that is not shared with
     any other peers. It is intended to allow a client to
     prove their identity should their IP address change. */
    let key: String?
    
    /** If a previous announce contained a tracker id,
     it should be set here */
    let trackerId: String?
    
    /** Convert to get parameter dictionary */
    var parameters: [String: QueryParam] {
        let keys = Keys()
        var params: [String: QueryParam] = [
            keys.infoHash: infoHash,
            keys.peerId: peerId,
            keys.port: port,
            keys.uploaded: uploaded,
            keys.downloaded: downloaded,
            keys.left: left,
            keys.compact: compact.int,
            keys.noPeerId: noPeerId.int,
            keys.event: event?.rawValue ?? "paused"
        ]
        
        params.addOptional(value: ip, for: keys.ip)
        params.addOptional(value: numwant?.urlEncoded, for: keys.numwant)
        params.addOptional(value: key, for: keys.key)
        params.addOptional(value: trackerId, for: keys.trackerId)
        
        return params
    }
    
    // MARK: - Init
    
    init(torrent: Torrent) {
        infoHash = torrent.metaInfo.info.hash
        // TODO: generate 20-byte-long UUID
        peerId = "-TR2920-8061zffht13e" // "qwertyuiopasdfghjklz"
        port = 6882
        uploaded = torrent.uploaded
        downloaded = torrent.downloaded
        left = torrent.left
        compact = true
        noPeerId = false
        event = nil //torrent.event
        ip = nil
        numwant = nil
        key = nil
        trackerId = torrent.trackerId
    }
}

private extension Torrent {
    
    var event: TorrentEvent? {
        // TODO: Enhance with stopped & completed events
        return nil == started ? .started : nil
    }
    
}
